# -*- coding: utf-8 -*-
"""data_fetcher.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CFsdqjxupuqYIGtcMXtcUeDMU01PdfmO
"""

# data_fetcher.py

import yfinance as yf
import requests
from babel.numbers import get_territory_currencies
from datetime import datetime, timedelta

# ----------------------------
# Currency exchange rate fetcher
# ----------------------------
def get_currency_from_region(region_code: str, country: str = None) -> str | None:
    try:
        currencies = get_territory_currencies(region_code.upper(), start_date=None, end_date=None)
        return currencies[0] if currencies else None
    except Exception:
        return None

def get_currency_rate(from_currency: str, to_currency: str, region: str = None) -> float:
    """
    Fetch exchange rate from from_currency to to_currency using exchangerate-api.
    """
    api_url = f"https://open.er-api.com/v6/latest/{from_currency.upper()}"
    response = requests.get(api_url)
    data = response.json()
    if data.get('result') != 'success':
        raise ValueError("Failed to fetch exchange rates")
    rates = data.get('rates', {})
    if to_currency.upper() not in rates:
        raise ValueError(f"Currency {to_currency} not found in rates")
    return float(rates[to_currency.upper()]), f"Currency Exchange Rate for {from_currency} to {to_currency} retrieved from internet."

def convert_currency(amount: float, from_currency: str, to_currency: str, region: str = None) -> float:
    """
    Convert amount from one currency to another.
    """
    rate_result = get_currency_rate(from_currency, to_currency)
    rate = rate_result[0] if isinstance(rate_result, tuple) else rate_result
    converted = amount * rate
    return round(converted, 2)

# ----------------------------
# Stock Price Checker
# ----------------------------

def get_ticker_from_company_name(company_name: str) -> str | None:
    """
    Search Yahoo Finance for ticker symbol from company name.
    Returns ticker symbol string or None if not found.
    """
    url = "https://query1.finance.yahoo.com/v1/finance/search"
    params = {"q": company_name, "quotesCount": 1, "newsCount": 0}
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/115.0 Safari/537.36"
        ),
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Language": "en-US,en;q=0.9",
    }

    try:
        resp = requests.get(url, params=params, headers=headers, timeout=5)
        resp.raise_for_status()
        data = resp.json()

        if data.get("quotes"):
            return data["quotes"][0].get("symbol")

    except Exception as e:
        print(f"Error searching ticker for '{company_name}': {e}")
    return None

def is_valid_ticker(ticker_symbol: str) -> bool:
    """
    Checks if the given ticker_symbol exists on Yahoo Finance by trying to fetch info.
    """
    try:
        ticker = yf.Ticker(ticker_symbol)
        info = ticker.info
        # If info has a regularMarketPrice or currency key, consider it valid
        if "regularMarketPrice" in info or "currency" in info:
            return True
        else:
            return False
    except Exception:
        return False

def get_stock_price(company_name: str, date: str = None, target_currency: str = "USD", country: str = None, region: str = None) -> float:
    """
    Get stock closing price for a symbol or company name on a given date.
    If date is None, returns latest closing price.
    Converts to target_currency if different from stock's native currency.
    If region is provided, use region to override target_currency.
    """
    # Override target_currency with region currency if region provided
    if region:
        local_currency = get_currency_from_region(region)
        print(f"Local currency {local_currency}")
        if local_currency:
            target_currency = local_currency
            print("Target Currency:", target_currency)

    if is_valid_ticker(company_name.upper()):
        ticker_symbol = company_name.upper()
    else:
        ticker_symbol = get_ticker_from_company_name(company_name)
        if ticker_symbol is None:
            raise ValueError(f"Could not find ticker symbol for company '{company_name}'")

    ticker = yf.Ticker(ticker_symbol)
    stock_currency = ticker.info.get('currency', 'USD')

    if date:
        start_date = datetime.strptime(date, "%Y-%m-%d")
        end_date = start_date + timedelta(days=1)
        hist = ticker.history(start=start_date.strftime("%Y-%m-%d"), end=end_date.strftime("%Y-%m-%d"))
        if hist.empty:
            raise ValueError(f"No data for {ticker_symbol} on {date}")
        price = float(hist['Close'].iloc[0])
    else:
        hist = ticker.history(period="1d")
        if hist.empty:
            raise ValueError(f"No recent data found for {ticker_symbol}")
        price = float(hist['Close'].iloc[0])

    if stock_currency != target_currency:
        print(f"price:{price}")
        price = convert_currency(price, stock_currency, target_currency)

    return round(price, 2), f"Stock price of {company_name} retrieved from Yahoo Finance in {target_currency} as of {date or 'today'}."

# -----------------------------
# Inflation rate fetcher (World Bank API)
# -----------------------------

def get_inflation_rate(country: str, year: int = None, region: str = None) -> float:
    """
    Fetch inflation rate (% annual change in consumer prices) for given country and year.
    If year is None, returns latest available inflation rate.
    """
    indicator = "FP.CPI.TOTL.ZG"
    base_url = f"http://api.worldbank.org/v2/country/{region}/indicator/{indicator}?format=json&per_page=100"
    response = requests.get(base_url)
    data = response.json()

    if not data or len(data) < 2:
        raise ValueError("Invalid response from World Bank API")

    records = data[1]
    if year:
        year = int(year)
        for rec in records:
            if rec['date'] == str(year) and rec['value'] is not None:
                return float(rec['value']), f"Inflation Rate is retrieved from World bank page for {country}."
        raise ValueError(f"No inflation data for {country} in {year}")
    else:
        for rec in records:
            if rec['value'] is not None:
                return float(rec['value'])
        raise ValueError(f"No inflation data available for {country}")

# -----------------------------
# GST / VAT rates mapping
# -----------------------------
GST_VAT_RATES = {
    "IN": 0.18,       # India 18%
    "AU": 0.10,       # Australia 10%
    "GB": 0.20,       # United Kingdom 20%
    "US": 0.0,        # USA no federal VAT/GST
    "CA": 0.05,       # Canada 5%
    "SG": 0.08,       # Singapore 8%
}

def get_gst_rate(country: str, region: str = None) -> float:
    """
    Return GST or VAT rate for a given ISO 2-letter country code.
    """
    code = region.strip().upper()
    if code not in GST_VAT_RATES:
        raise ValueError(f"GST/VAT rate not available for country code {country}")
    return GST_VAT_RATES[code], f"GST/VAT rate retrieved from internet for {country} is here."
